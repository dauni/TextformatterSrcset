<?php namespace ProcessWire;

class TextformatterSrcsetConfig extends \ProcessWire\ModuleConfig {
	public function getInputfields() {
		//return parent::getInputfields(); // TODO: Change the autogenerated stub
		$inputfields = parent::getInputfields();

		//If user choses lazysizes plugin, activate data-attributes
		if ($this->input->post->ll_attr == 1) {
			$this->input->post->data_attr = 1;
			if ($this->ll_attr == 0)
				$this->message('Set Data* to 1 because Lazysizes was set to 1');
		}

		$f = $this->modules->get('InputfieldRadios');
		$f->name = 'srcmethod';
		$f->columnWidth = 100;
		$f->label = $this->_('Used method');
		$f->description = $this->_('Use art direction with picture-element or use resolution switching with srcset+sizes. ');
		$f->notes = $this->_('Art direction is required if you want to provide webp-Format or if you want decide, which image has to be displayed by the browser');
		$f->options = array('picture' => 'art direction with picture-element', 'srcset' => 'resolution switching with srcset+sizes');
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldText');
		$f->name = 'resolutions';
		$f->columnWidth = 33;
		$f->label = $this->_('Resolutions');
		$f->description = $this->_('Enter the resolutions (in Pixel) to be created for the srcset. Seperate by comma, leave empty if you do not need multiple sizes.');
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldText');
		$f->name = 'medias';
		$f->columnWidth = 33;
		$f->label = $this->_('Medias');
		$f->description = $this->_('Enter the medias (in Pixel) to be created for the srcset - corresponding to the image-resolutions. Seperate by comma, leave empty if you do not need multiple sizes.');
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldText');
		$f->name = 'borders';
		$f->columnWidth = 34;
		$f->label = $this->_('Borders (picture)');
		$f->description = $this->_('Enter the borders (min-width/max-width) - corresponding to the image-resolutions and medias. Seperate by comma, leave empty if you do not need multiple sizes.');
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldText');
		$f->name = 'sizes';
		$f->columnWidth = 50;
		$f->label = $this->_('Sizes-Attribute (srcset)');
		$f->description = $this->_('Enter the value for the "sizes" attribute. Default is "auto".');
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldText');
		$f->name = 'class';
		$f->columnWidth = 50;
		$f->label = $this->_('CSS Class');
		$f->description = $this->_('Enter CSS-class names that will be added to each image.');
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldCheckbox');
		$f->name = 'retina';
		$f->label = $this->_('Generate HiDPI images');
		$f->description = $this->_('Activate to create HiDPI images (double resolution). They appear as an additional size.');
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldCheckbox');
		$f->name = 'lqp';
		$f->columnWidth = 33;
		$f->label = $this->_('Low-quality Placeholder');
		$f->description = $this->_('Activate to create a low-quality placeholder (LQP) image for the src-attribute.');
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldCheckbox');
		$f->name = 'small_source';
		$f->columnWidth = 33;
		$f->label = $this->_('Use smallest size as LQP');
		$f->description = $this->_('Activate to use the smallest sized image as the low-quality placeholder');
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldCheckbox');
		$f->name = 'wp_attr';
		$f->columnWidth = 34;
		$f->label = $this->_('Add Webp-Version');
		$f->description = $this->_('Activate to add a Webp-version to each variation (since processwire 3.0.132). Activates art direction.');
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldCheckbox');
		$f->name = 'wh_attr';
		$f->columnWidth = 33;
		$f->label = $this->_('Width/Height Attributes');
		$f->description = $this->_('Activate to add the right width and height attribute.');
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldCheckbox');
		$f->name = 'data_attr';
		$f->columnWidth = 33;
		$f->label = $this->_('Data* attributes');
		$f->description = $this->_('Activate to add a data*- before the srcset and sizes attributes.');
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldCheckbox');
		$f->name = 'll_attr';
		$f->columnWidth = 34;
		$f->label = $this->_('Use Lazysizes 5.2.0 JS-plugin');
		$f->description = $this->_('Activate to add Lazy loading. Forces data* attributes to be activated. Includes lazysizes.min.js. Adds the class "lazyload"');
		$inputfields->add($f);

		return $inputfields;
	}

	public function getDefaults() {
		//return parent::getDefaults(); // TODO: Change the autogenerated stub
		return array(
			// settings
			"srcmethod" => "picture", //Use art direction with picture tag
			"resolutions" => "350,700", //Only numbers, seperated by comma
			"medias" => "799,800", //Only numbers, seperated by comma
			"borders" => "max-width,min-width", //Only numbers, seperated by comma
			"sizes" => "auto", //What to put into the sizes attribute
			"retina" => true, //Create an image double the largest image size for HiDPI devices
			"data_attr" => false, //Add the data-* attributes
			"wh_attr" => false, //Should we add width and height attributes?
			"lqp" => true, //Use a low quality placeholder for the src attribute
			"small_source" => false, //Use the smallest size as a source image instead of a scaled down image
			"class" => '', //Classes added to the image
			"ls_attr" => false, //Inlcude automatically lazysizes.js and add corresponding data-attributes
			"wp_attr" => false //Generate WEBP-Version (Since processwire 3.0.132)
		);
	}
}