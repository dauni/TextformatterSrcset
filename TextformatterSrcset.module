<?php namespace ProcessWire;

class TextformatterSrcset extends Textformatter implements Module
{

    //https://stackoverflow.com/questions/44440161/specifying-both-image-size-and-pixel-density-in-srcset
    //https://blog.kulturbanause.de/2014/09/responsive-images-srcset-sizes-adaptive/
    //https://addyosmani.com/blog/lazy-loading/
    //https://html.spec.whatwg.org/multipage/embedded-content.html#attr-img-srcset
    //https://processwire.com/api/ref/image-sizer-engine/set-options/
    // 'scale' => 1.0 (use 2.0 for hidpi or 1.0 for normal-default) 'hidpi' => false, (alternative to scale, specify true to enable hidpi)

    /**
     * Module information
     * https://processwire.com/api/ref/module/
     *
     */
    private $options = array();
    private $options_low = array();
    private $cutdata;

    #private $dowatermark = true;

    public static function getModuleInfo() {

        return array(
            'title' => 'Srcset Image Text Formatter',
            'version' => 107,
            'summary' => "Adds the srcset to images within a textarea",
            'author' => 'Conclurer GbR, Daniel',
            'autoload' => false,
            'singular' => false,
            'icon' => 'picture-o',
            'requires' => array('ProcessWire>=3.0.0', 'PHP>=7.2.0')
        );
    }

    public function init() {
        $this->wire('log')->save('scrset', 'init');
        if ($this->dowatermark)
            $this->addHook('Pageimage::watermark', $this, 'hookWatermark');
        #$this->addHookBefore('Pageimage::imSaveReady', $this, 'hookWebp');
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function hookWebp($event) {
        $this->wire('log')->save('scrset', 'hookWebp begin');
        $event->object->watermark();
        $image = imagecreatefromjpeg($event->object->filename);
        #$event->return = $event->object;
        $event->arguments('im', $image);
    }

    public function hookWatermark($event) {
        #$this->error('my hook did somewhat', true);
        $this->wire('log')->save('scrset', 'hookWatermark begin');
        #var_dump($event);
        #var_dump($event->object);
        try {
            $this->wire('log')->save('scrset', 'get ' . $event->object->filename);
            #$image = $event->object;
            $image = imagecreatefromjpeg($event->object->filename);
            $textcolor = imagecolorallocate($image, 123, 123, 123);
            $font_file = __DIR__ . DIRECTORY_SEPARATOR . 'LilitaOne-Regular.ttf';
            $custom_text = $event->arguments(0) ?? "Default Watermark";
            imagettftext($image, 22, 0, 20, 40, $textcolor, $font_file, $custom_text);
        } catch (\Exception $e) {
            $this->wire('log')->save('scrset', 'problem beim erstellen');
            echo $e->getMessage();
        }
        try {
            $this->wire('log')->save('scrset', 'set ' . $event->object->filename);
            imagejpeg($image, $event->object->filename);
            imagedestroy($image);
            $event->return = $event->object;
        } catch (\Exception $e) {
            $this->wire('log')->save('scrset', 'problem beim speichern');
            echo "<p>" . $e->getMessage();
        }
    }

    public function formatValue(Page $page, Field $field, &$str) {
        $page->setOutputFormatting(false);
        #$stateBefore = $page->of();
        #$page->of(false);


        //Get all image tags from the $str and place them in $images
        if (!preg_match_all('/<img[^>]+>/i', $str, $images)) return;
        #echo "Bilder: "; var_dump($images);

        //Setup...
        $matches = array();
        $fileLocation = $this->config->urls->files;
        $sizes = array_map('intval', array_filter(explode(',', $this->resolutions), 'is_numeric'));
        #sort($sizes);
        $medias = array_map('intval', array_filter(explode(',', $this->medias), 'is_numeric'));
        #sort($medias);
        $borders = explode(',', $this->borders);
        #var_dump($sizes);
        $this->options = array('upscaling' => false, 'cropping' => true, 'interlace' => true);
        $this->options_low = array('upscaling' => true, 'cropping' => true, 'quality' => floor($this->config->imageSizerOptions['quality'] * 0.33));

        if ($this->wp_attr && $this->config->version('3.0.132')) {
            #$this->options = array('upscaling' => false, 'cropping' => true, 'webpAdd' => true, 'webpQuality' => 75);
            #$this->options_low = array('upscaling' => true, 'cropping' => true, 'quality' => floor($this->config->imageSizerOptions['quality'] * 0.33), 'webpAdd' => true, 'webpQuality' => 65);
        }


        //Looping through all images
        foreach ($images[0] as $original) {

            //Building our new image string
            $new = '';
            $meta = array();
            $meta['pw_align'] = "";
            $meta['alt'] = "";
            $meta['source'] = "";
            $meta['width'] = 0;
            $meta['height'] = 0;
            $meta['quelle'] = $this->imgtitle;
            $attribute = $strappend = '';

            if ($this->data_attr) {
                $attribute = "data-";
            }
            if ($this->ll_attr) {
                $this->class = trim(str_replace('lazyload', '', $this->class) . ' lazyload');
                $strappend = '<script src="' . $this->config->urls->$this . 'lazysizes.min.js' . '" async></script>';
            }

            /**
             * The following code was taken and modified from Martijn Geerts and the TextformatterImageInterceptor module.
             */
            //Get the PageImage from our image
            if (strpos($original, $fileLocation)) {
                #var_dump($original);
                //Find source image
                preg_match_all('/src=["|\'](.*?)["|\']/i', $original, $immatches);
                #echo "Bilder: <pre>";
                #var_dump($immatches);

                if (!$immatches[1]) continue;
                #if (!is_file($immatches[1][0])) break;
                $meta['source'] = $immatches[1][0]; // original

                // ProcessWire alignment done with a class
                preg_match_all('/class="(.*?)"/i', $original, $immatches);
                #var_dump($immatches);
                $meta['pw_align'] = isset($immatches[1][0]) ? $immatches[1][0] : null; // original

                //Get alt tag if it exists
                preg_match_all('/alt="(.*?)"/i', $original, $immatches);
                $meta['alt'] = isset($immatches[1][0]) ? $immatches[1][0] : null;

                // example: 1023/image-name.100x100.jpg
                $string = str_replace($fileLocation, "", $meta['source']);
                $immatches = explode("/", $string);
                // id of page where where image belongs to
                $meta['id'] = $immatches[0];
                // refering to to page where the image lives - if it is not the current page.
                if ($meta['id'] != $page->id)
                    $page = $this->pages->get($meta['id']);

                $imfields = array();
                //If there are more than one imagefield, or the imagefield-name is not "images"
                foreach ($page->getFields() as $field) {
                    if ($field->type == 'FieldtypeImage') {
                        $imfields[] = $field->name;
                    }
                }
                //If there are no imagefields, we can quit the work
                if (count($imfields) < 1)
                    return;

                // raw image variation name
                $variationName = $immatches[1];
                #echo "<p>" . $variationName;

                //If there is a cropped image, get the crop coordinates
                if (strpos($variationName, 'crop') !== false) {
                    $tmp = explode('.', $variationName);
                    $cutsizes = explode('-', $tmp[1]);
                    $cutdata = new \stdClass();
                    $cutdata->width = substr($cutsizes[0], 0, strpos($cutsizes[0], 'x'));
                    $cutdata->height = substr($cutsizes[0], strpos($cutsizes[0], 'x') + 1);
                    $cutdata->x = substr($cutsizes[1], 5, strpos($cutsizes[1], 'y') - 5);
                    $cutdata->y = substr($cutsizes[1], strpos($cutsizes[1], 'y') + 1);
                    $this->cutdata = $cutdata;
                    #echo "<p>" . $cutdata->width . " x " . $cutdata->height . " : s-" . $cutdata->x." e-".$cutdata->y;
                    #var_dump($cutsizes);
                    #var_dump($this->cutdata);
                }

                // first check if a pageimagename corresponds to $variationName,
                // second check all pageimagevariations for $variationName
                // if the pages does not have images, exit
                foreach ($imfields as $field) {
                    if ($page->{$field})
                        foreach ($page->{$field} as $imvar) {
                            #$pagebilder[$page->id][++$i][] = $imvar->name;
                            if ($variationName == $imvar->name) {
                                $parent = $item = $imvar;
                                break;
                            } else {
                                foreach ($imvar->getVariations() as $var) {
                                    #$pagebilder[$page->id][$i][] = $var->name;
                                    if ($variationName == $var->name) {
                                        $item = $var;
                                        $parent = $item->getOriginal();
                                        break 2;
                                    }
                                }
                            }
                        }
                }


                if (!isset($parent)) {
                    $this->error('File ' . $fileLocation . $variationName . ' not found', true);
                    return;
                }


                #var_dump($item);
                #var_dump($item->getOriginal());
                if ($this->iptc) {
                    //Get copyright information from IPTC-tags and add them to the title
                    getimagesize($parent->filename, $info);
                    $data = [];

                    if (array_key_exists('APP13', $info)) {
                        $iptc = iptcparse($info['APP13']);
                        //See https://github.com/Intervention/image/blob/master/src/Intervention/Image/Commands/IptcCommand.php
                        if (is_array($iptc)) {
                            $data['DocumentTitle'] = isset($iptc["2#005"][0]) ? $iptc["2#005"][0] : null;
                            $data['Urgency'] = isset($iptc["2#010"][0]) ? $iptc["2#010"][0] : null;
                            $data['Category'] = isset($iptc["2#015"][0]) ? $iptc["2#015"][0] : null;
                            $data['Subcategories'] = isset($iptc["2#020"][0]) ? $iptc["2#020"][0] : null;
                            $data['Keywords'] = isset($iptc["2#025"][0]) ? $iptc["2#025"] : null;
                            $data['SpecialInstructions'] = isset($iptc["2#040"][0]) ? $iptc["2#040"][0] : null;
                            $data['CreationDate'] = isset($iptc["2#055"][0]) ? $iptc["2#055"][0] : null;
                            $data['CreationTime'] = isset($iptc["2#060"][0]) ? $iptc["2#060"][0] : null;
                            $data['AuthorByline'] = isset($iptc["2#080"][0]) ? $iptc["2#080"][0] : null;
                            $data['AuthorTitle'] = isset($iptc["2#085"][0]) ? $iptc["2#085"][0] : null;
                            $data['City'] = isset($iptc["2#090"][0]) ? $iptc["2#090"][0] : null;
                            $data['SubLocation'] = isset($iptc["2#092"][0]) ? $iptc["2#092"][0] : null;
                            $data['State'] = isset($iptc["2#095"][0]) ? $iptc["2#095"][0] : null;
                            $data['Country'] = isset($iptc["2#101"][0]) ? $iptc["2#101"][0] : null;
                            $data['OTR'] = isset($iptc["2#103"][0]) ? $iptc["2#103"][0] : null;
                            $data['Headline'] = isset($iptc["2#105"][0]) ? $iptc["2#105"][0] : null;
                            $data['Source'] = isset($iptc["2#110"][0]) ? $iptc["2#110"][0] : null;
                            $data['PhotoSource'] = isset($iptc["2#115"][0]) ? $iptc["2#115"][0] : null;
                            $data['Copyright'] = isset($iptc["2#116"][0]) ? $iptc["2#116"][0] : null;
                            $data['Caption'] = isset($iptc["2#120"][0]) ? $iptc["2#120"][0] : null;
                            $data['CaptionWriter'] = isset($iptc["2#122"][0]) ? $iptc["2#122"][0] : null;
                        }

                        if (isset($data['Copyright'])) //Copyright
                            $meta['quelle'] = $data['Copyright'];
                        elseif (isset($data['Source'])) //Credits
                            $meta['quelle'] = $data['Source'];
                        elseif (isset($data['AuthorByline'])) //Author
                            $meta['quelle'] = $data['AuthorByline'];

                    }
                }

                $title = $meta['quelle'] ? "title='{$meta['quelle']}'" : "";
                $meta['width'] = $item->width();
                $meta['height'] = $item->height();
                $image = $item;
            } else {
                //Nothing found
                break;
            }


            /**
             * Build the srcset
             */

            $srcset = array();
            $smedia = array();


            $src = $meta['source'];
            if ($this->dowatermark) {
                $src = $image->width($item->width())->watermark($meta['quelle'])->url;
            }

            if ($this->lqp or $this->small_source) {
                //Should we use the smallest image from the sizes?
                if ($this->small_source && !empty($sizes)) {
                    $src_image = $image->width($sizes[0], $this->options);
                } //Or do we really use a LQ image?
                else {
                    $new_size = floor($image->width * 0.2);
                    $src_image = $image->width($new_size, $this->options_low);
                }
                if ($this->dowatermark) {
                    $src = $src_image->watermark($meta['quelle'])->url;
                } else {
                    $src = $src_image->url;
                }
                if (!$this->dpr)
                    $srcset[] = "{$src_image->url} {$src_image->width}w";
            }


            //When no sizes are set
            if (empty($sizes)) {
                if ($this->dpr)
                    $srcset = array_merge($srcset, $this->get_dpr($parent, $image, null));
                else
                    $srcset[] = ($this->dowatermark ? "{$item->watermark($meta['quelle'])->url} 1x" : "{$item->url} 1x");
            } else {
                foreach ($sizes as $num => $size) {
                    if ($image) {
                        if ($image->width < $size) {
                            //Use the original file for variation that becomes bigger as the actual image
                            if (isset($this->cutdata->width)) {
                                if ($this->cutdata->width <= $size) {
                                    if ($this->cutdata->x > $this->cutdata->width)
                                        $this->cutdata->x -= $this->cutdata->width * 0.25;
                                    if ($this->cutdata->y > $this->cutdata->height)
                                        $this->cutdata->y -= $this->cutdata->height * 0.25;
                                    $new_image = ($this->dowatermark ? $parent->crop($this->cutdata->x, $this->cutdata->y, $this->cutdata->width * 1.5, $this->cutdata->height * 1.5)->width($size, $this->options)->watermark($meta['quelle']) : $parent->crop($this->cutdata->x, $this->cutdata->y, $this->cutdata->width * 1.5, $this->cutdata->height * 1.5)->width($size, $this->options));
                                } elseif ($this->cutdata->width >= $size)
                                    $new_image = ($this->dowatermark ? $parent->crop($this->cutdata->x, $this->cutdata->y, $this->cutdata->width, $this->cutdata->height)->width($size, $this->options)->watermark($meta['quelle']) : $parent->crop($this->cutdata->x, $this->cutdata->y, $this->cutdata->width, $this->cutdata->height)->width($size, $this->options));
                            } else {
                                $new_image = ($this->dowatermark ? $parent->width($size, $this->options)->watermark($meta['quelle']) : $parent->width($size, $this->options));
                                #$new_image = $parent->width($size, $this->options);
                            }
                        } else {
                            //Replaces variation with a watermarked version - if watermark changed it will be added over the existing one
                            $new_image = ($this->dowatermark ? $image->width($size, $this->options)->watermark($meta['quelle']) : $image->width($size, $this->options));
                        }
                        $srcset[] = "{$new_image->url} {$new_image->width}w";
                        $picture = new \stdClass();
                        //Build the srcset-array. First webp - because browser takes first source which meets criteria defined in media
                        if ($this->wp_attr)
                            if ($this->config->version('3.0.132'))
                                if ($new_image->hasWebp) {
                                    if ($this->checktrans($image->filename)) {
                                        $dpr = $new_image->webp->url;
                                        if ($this->dpr) {
                                            $dpr = implode(', ', $this->get_dpr($parent, $new_image, $size, true));
                                        }
                                        $picture->src = $new_image->webp->url;
                                        $picture->dpr = $dpr;
                                        if ($this->srcmethod == 'picture' && count($medias)) {
                                            $picture->media = $medias[$num];
                                            $picture->border = $borders[$num];
                                        }
                                        $picture->type = $this->config->fileContentTypes($new_image->webp->ext);
                                        $smedia[] = $picture;
                                    }
                                }
                        //Now the non webp-files
                        $dpr = $new_image->url;
                        if ($this->dpr) {
                            $dpr = implode(', ', $this->get_dpr($parent, $new_image, $size));
                        }
                        $picture = new \stdClass();
                        $picture->src = $new_image->url;
                        $picture->dpr = $dpr;
                        if ($this->srcmethod == 'picture' && count($medias)) {
                            $picture->media = $medias[$num];
                            $picture->border = $borders[$num];
                        }
                        $picture->type = $this->config->fileContentTypes($new_image->ext);
                        $smedia[] = $picture;
                    }
                }

                #}

                if ($this->dpr) {
                    //You cannot use devicepixelratio switching together with resolution switching, so the srcset will not combined but overwritten here
                    #$srcset = array_merge($srcset, $this->get_dpr($parent, $image, null));
                    $srcset = $this->get_dpr($parent, $image, null);
                }


            }


            /**
             * Finally, Build the <img>
             */

            $wh_attr = '';
            $class = '';
            $ds = ($this->sizes ? " {$attribute}sizes='{$this->sizes}' " : "");
            $alt = ($meta['alt'] ? "alt='{$meta['alt']}'" : "");
            #var_dump($srcset);
            $srcset = implode(', ', $srcset);

            if ($this->wh_attr) {
                $tmp_height = $image->width($meta['width'])->height;
                $wh_attr = " width='{$meta['width']}' height='{$tmp_height}'";
            }

            if ($meta['pw_align'] != "" or $this->class != "") {
                $class = " class='";
                if ($meta['pw_align'] != "")
                    $class .= " {$meta['pw_align']} ";
                if ($this->class != '')
                    $class .= " {$this->class}";
                $class .= "'";
            }

            if (count($smedia) > 0) {
                #var_dump($smedia);
                if ($this->srcmethod == 'picture') {
                    $new = "<picture>";
                    foreach ($smedia as $med) {
                        if (isset($med->border))
                            $new .= "<source media='(" . $med->border . ":" . $med->media . "px)' {$attribute}srcset='" . ($this->dpr ? $med->dpr : $med->src) . "' type='$med->type'>";
                        else
                            $new .= "<source {$attribute}srcset='" . ($this->dpr ? $med->dpr : $med->src) . "' type='$med->type'>";
                    }

                    $new .= "<img {$attribute}src='{$src}' {$wh_attr} {$alt}{$title} {$class}/>";
                    $new .= "</picture>";
                }
                if ($this->srcmethod == 'srcset') {
                    if ($this->dpr)
                        $ds = '';
                    $new = "<img {$attribute}srcset='{$srcset}' {$attribute}src='{$src}'{$ds}{$wh_attr}{$class} {$alt}{$title}>";
                }


            } else {
                //If there are no sizes set in the module, we do nothing?
                #die('dieses else macht was?');
                if ($this->srcmethod == 'picture') {
                    $picture = new \stdClass();
                    $smedia = array();
                    if ($this->wp_attr)
                        if ($this->config->version('3.0.132'))
                            if ($image->hasWebp) {
                                if ($this->checktrans($image->filename)) {
                                    $dpr = $image->webp->url;
                                    if ($this->dpr) {
                                        $dpr = implode(', ', $this->get_dpr($parent, $image, null, true));
                                    }
                                    $picture->src = $image->webp->url;
                                    $picture->dpr = $dpr;
                                    $picture->type = $this->config->fileContentTypes($image->webp->ext);
                                    $smedia[] = $picture;
                                }
                            }
                    $picture = new \stdClass();
                    $dpr = $image->url;
                    if ($this->dpr) {
                        $dpr = implode(', ', $this->get_dpr($parent, $image, null));
                    }
                    $picture->src = $image->url;
                    $picture->dpr = $dpr;
                    $picture->type = $this->config->fileContentTypes($image->ext);
                    $smedia[] = $picture;

                    $new = "<picture>";
                    foreach ($smedia as $med) {
                        $new .= "<source {$attribute}srcset='" . ($this->dpr ? $med->dpr : $med->src) . "' type='$med->type'>";
                    }


                    $new .= "<img {$attribute}src='{$src}' {$wh_attr} {$alt}{$title} {$class}/>";
                    $new .= "</picture>";
                }
                if ($this->srcmethod == 'srcset') {
                    $new = "<img {$attribute}srcset='{$srcset}' {$attribute}src='{$src}'{$wh_attr}{$class} {$alt}{$title}>";
                }
                #$new = $original;

            }
            //Add to our new images
            $matches[] = $new;
            unset($this->cutdata);
        }

        //Replace all Image tags with our new ones and return.
        $str = str_replace($images[0], $matches, $str) . $strappend;
        #$page->of($stateBefore);
        return;
    }

    private function get_dpr(Pageimage $parent, Pageimage $image, int $size = null, bool $webp = false) {
        $srcset = array();
        if ($size) {
            for ($m = 3; $m > 1; $m--) {
                $msize = $size * $m;
                if ($image->width >= $msize)
                    $bild = $image;
                elseif ($parent->width >= $msize) {
                    $bild = $parent;
                    if (isset($this->cutdata->width))
                        $bild = $parent->crop($this->cutdata->x, $this->cutdata->y, $this->cutdata->width, $this->cutdata->height);
                }
                if (isset($bild)) {
                    $dpr = $bild->width($msize, $this->options);
                    if ($this->dowatermark)
                        $dpr = $dpr->watermark();
                    if ($webp)
                        $srcset[] = "{$dpr->webp->url} {$m}x";
                    else
                        $srcset[] = "{$dpr->url} {$m}x";
                    unset($bild);
                }
            }
        }
        if ($webp)
            $srcset[] = "{$image->webp->url} 1x";
        else
            $srcset[] = "{$image->url} 1x";
        return $srcset;
    }

    private function checktrans($image) {
        if ($this->trans) {
            if (extension_loaded('imagick')) {
                $img = new \Imagick();
                $img->readImage($image);
                // 0 = No transparency
                // 1 = Has transparency
                $hasTransparency = $img->getImageAlphaChannel();
            } else {
                $hasTransparency = $this->png_has_transparency($image);
            }
            if ($hasTransparency) {
                #echo "The image has transparency :)";
                return false;
            } else {
                #echo "The image has no transparency :(";
                return true;
            }
        }
        return true;
    }

    private function png_has_transparency($filename) {
        if (strlen($filename) == 0 || !file_exists($filename))
            return false;

        if (ord(file_get_contents($filename, false, null, 25, 1)) & 4)
            return true;

        $contents = file_get_contents($filename);
        if (stripos($contents, 'PLTE') !== false && stripos($contents, 'tRNS') !== false)
            return true;

        return false;
    }

    private function get_croparea(object $image, object $parent, int $size) {
        if (!$this->cutdata->width)
            return false;
        $ratio = $this->cutdata->width / $this->cutdata->height;
        if ($image->width < $size && $parent->width >= $size) {
            $out = $parent->crop($x, $y, $w, $h)->width($size, $this->options);
        }
    }
}